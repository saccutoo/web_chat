export declare let HyperUtils: {
    TYPE_OBJECT: string;
    TYPE_FUNCTION: string;
    TYPE_STRING: string;
    TYPE_UNDEFINED: string;
    KEY_CODE_BACKSPACE: number;
    KEY_CODE_ESC: number;
    KEY_CODE_ENTER: number;
    KEY_CODE_LEFT: number;
    KEY_CODE_RIGHT: number;
    KEY_CODE_UP: number;
    KEY_CODE_DOWN: number;
    KEY_CODE_DELETE: number;
    KEY_CODE_COMMA: number;
    KEY_CODE_DOT: number;
    KEY_CODE_TAB: number;
    KEY_CODE_SPACE: number;
    CHAR_POSSIBLE: string;
    RIGHT_CLICK_CODE: number[];
    STR_COMMA: string;
    STR_DOT: string;
    STR_SPACE: string;
    MSG_BUNDLES: string[];
    AVG_TIME_TEMPLATE_RENDER: number;
    FAST_TIME_RENDER: number;
    GOAL_ATTACH_SIZE: number;
    DATA_UNIT_B: number;
    DATA_UNIT_KB: number;
    DATA_UNIT_MB: number;
    DATA_UNIT_GB: number;
    DATA_UNIT_TB: number;
    DATA_UNIT_PB: number;
    DATA_UNIT_EB: number;
    DATA_UNIT_ZB: number;
    DATA_UNIT_YB: number;
    DATA_UNIT_BB: number;
    DATA_UNIT_GEB: number;
    MAP_UNIT_MEASURE: {
        B: number;
        KB: number;
        MB: number;
        GB: number;
        TB: number;
        PB: number;
        EB: number;
        ZB: number;
        YB: number;
        BB: number;
        GEB: number;
    };
    mapRegrex: {
        '&': string;
        '<': string;
        '>': string;
        '"': string;
        "'": string;
        '/': string;
    };
    listTagRegrex: {};
    isEmpty: (value: any) => boolean;
    isNotEmpty: (value: any) => boolean;
    isNil: (value: any) => boolean;
    isNotNil: (value: any) => boolean;
    isBoNil: (bo: any) => boolean;
    isBoNotNil: (bo: any) => boolean;
    isTrue: (value: any) => boolean;
    isFalse: (value: any) => boolean;
    executeVal: (value: any, params: any) => any;
    val: (text: any) => any;
    valueIn: (value: any, collection: any) => boolean;
    valueListIn: (values: any, collection: any) => boolean;
    collectionContains: (collection: any, value: any) => boolean;
    collectionContainsOne: (collection: any, values: any) => boolean;
    getCharPossiple: () => string;
    genRandomID: (length: any) => string;
    getRequestAjaxByUrl: (url: any) => any;
    getRequestByUrl: (url: any) => any;
    toFormDataByBean: (bean: any) => any;
    toFormDataByForm: (formObj: any) => any;
    toFormData: (requestForm: any) => any;
    getRequestFormData: (data: any) => {};
    checkUpdateField: (bo: any, dbBo: any, fieldName: any, applyNull: any) => boolean;
    settingUpdateFields: (bo: any, dbBo: any, updateFieldNames: any, fieldNames: any, applyAllNull: any, removeNotApplyField: any) => void;
    validateUpdateField: (bo: any, updateFieldNames: any, fieldName: any, condition: any) => void;
    applyUpdateField: (obj: any, updateFields: any, fieldName: any, newValue: any, oldValue: any, applyNull: any) => void;
    compare: (obj1: any, obj2: any) => boolean;
    compareCollection: (col1: any, col2: any) => boolean;
    compareDateString: (sdate1: any, sdate2: any) => number;
    getUrlParam: (paramName: any) => string;
    concatArray: (a: any, b: any, fieldKey: any) => any[];
    equalInputVal: (source: any, target: any) => boolean;
    orAll: (arrayInt: any) => number;
    countCollection: (collection: any) => any;
    arrayChangeItemPosition: (array: any, oldIndex: any, newIndex: any) => void;
    orderArray: (array: any, compare: any) => void;
    sortArray: (array: any, propName: any, desc: any) => void;
    sortObject: (obj: any, desc: any) => {};
    firstOrder: (map: any, propName: any, asc: any, isDate: any) => any;
    firstCollection: (collection: any) => any;
    sortObjMapProperty: (objMap: any, propName: any, asc: any, isDate: any) => any;
    keysSort: (objMap: any, fieldKey: any, fieldSort: any, asc: any, isDate: any) => any[];
    filterMap: (objMap: any, objFilter: any) => {};
    getObjFromCollection: (objs: any, obj: any) => any;
    getObjFromTreeCollection: (objs: any, obj: any) => any;
    searchObjFromTreeCollection: (objs: any, obj: any) => any;
    getById: (objs: any, id: any) => any;
    getByHashKey: (objs: any, hashKey: any) => any;
    findCollection: (objs: any, objMatch: any) => any;
    findCollectionFieldValueIn: (objs: any, fieldName: any, values: any) => any;
    findCollectionFieldValueNotIn: (objs: any, fieldName: any, values: any) => any;
    findCollectionQuery: (collection: any, queryObject: any) => any;
    collectionAdd: (collection: any, obj: any, pushIfExist: any, addFirst: any) => boolean;
    arrayAdd: (array: any, obj: any, pushIfExist: any, addFirst: any) => void;
    mapAdd: (map: any, obj: any, pushIfExist: any) => void;
    collectionAddAll: (collection: any, objs: any, pushIfExist: any) => void;
    removeById: (objs: any, id: any) => boolean;
    removeByField: (objs: any, field: any, value: any) => boolean;
    removeByProperty: (objs: any, property: any, value: any) => boolean;
    collectionRemove: (collection: any, itemMatch: any) => any;
    compareMatch: (obj1: any, obj2: any) => boolean;
    arrayPushFirst: (collection: any, value: any) => void;
    arrayPushRemove: (array: any, value: any) => any;
    collectionFindIn: (collection: any, values: any, valueField: any, isArray: any) => any;
    collectionFilterText: (collection: any, pattern: any, textField: any, isArray: any) => any;
    arrayToString: (array: any, field: any) => any;
    arrayToObjectWithId: (array: any) => {};
    copyObjectWithIdToArray: (array: any, obj: any) => void;
    applyReferences: (objMap: any, referenceMap: any, arrayMap: any, reset: any, skipIfExist: any, skipUpdateFields: any) => void;
    findDifferent: (array1: any, array2: any) => any;
    applyItemReferences: (obj: any, referenceMap: any, arrayMap: any, reset: any, skipIfExist: any) => void;
    deleteItemAllReferences: (obj: any, referenceMap: any, arrayMap: any) => void;
    pushToMap: (obj: any, arrayObj: any) => void;
    pushMap: (obj: any, map: any, applyNull: any, fieldKey: any) => void;
    resetPushToMap: (obj: any, arrayObj: any) => void;
    pushArrayToMap: (objs: any, map: any, key: any) => void;
    resetEmpty: (collection: any) => void;
    pushItemToMap: (obj: any, arrayObj: any) => void;
    putOfMap: (obj: any, arrayObj: any) => void;
    map: (objs: any, fieldKey: any, valueKey: any) => {};
    mapTree: (objs: any, fieldKey: any, valueKey: any) => {};
    mapList: (objs: any, fieldKey: any) => {};
    list: (objMap: any, fieldName: any, distinct: any) => any;
    arrayDistinct: (array: any) => any[];
    newObjIncludeProperties: (source: any, skipProperties: any) => any;
    applyChangeProperties: (source: any, target: any, applyNull: any, skipProperties: any) => void;
    newInstance: () => {};
    _extend: (deepCopy: any, objs: any) => void;
    extend: () => void;
    extendRefer: () => void;
    setDefaultValues: (target: any, defaultValue: any) => void;
    setCollection: (collection: any, fieldName: any, value: any) => void;
    applyObjToCollection: (obj: any, collection: any, applyNull: any, fields: any, skipFields: any, alwayNotExist: any, addFirst: any) => any;
    applyAllToCollection: (objs: any, collection: any, applyNull: any, fields: any, skipFields: any, addFirst: any) => void;
    copyProperties: (source: any, target: any, fields: any, skipFields: any, applyNull: any) => void;
    getProperty: (source: any, propertySelect: any) => any;
    split: (s: any, delim: any) => any;
    clone: (obj: any) => any;
    validateFile: (file: any, fileSize: any) => boolean;
    mapToArray: (map: any) => any[];
    isString: (func: any) => boolean;
    isObject: (obj: any) => boolean;
    isPlainObject: (obj: any) => boolean;
    isDbObject: (obj: any) => boolean;
    isArray: (obj: any) => boolean;
    isFunction: (func: any) => boolean;
    isEmptyObject: (obj: any) => boolean;
    isImage: (contentType: any) => boolean;
    getFileType: (file: any) => "fa-file-excel-o fa-file-excel" | "fa-file-word-o fa-file-word" | "fa-file-powerpoint-o fa-file-powerpoint" | "fa-file-pdf-o fa-file-pdf" | "fa-file-archive-o fa-file-archive" | "fa-file-code-o fa-file-code" | "fa-external-link-alt" | "fa-file-image-o fa-file-image" | "fa-file-audio-o fa-file-audio" | "fa-file-video-o fa-file-video" | "fa-file-alt" | "fa-file-o fa-file";
    parseJson: (value: any) => any;
    getPaginated: (dataLength: any, pageSize: any) => {
        page: number;
        pageSize: any;
        maxRow: any;
        startRow: any;
    };
    ltInteger: (a: any, b: any) => boolean;
    eqInteger: (a: any, b: any) => boolean;
    getFbTime: (datetime: any, serverDate: any) => string;
    printCaseString: () => any;
    toNoSign: (value: any) => any;
    cloneJson: (obj: any) => any;
    updateState: (state: any, options: any) => any;
    applyDataSet: (state: any, options: any) => any;
    handleResAfterUpdateStore: (responseHandlers: any, res: any) => void;
    capitalFirstCharacter: (text: string) => string;
};
